name: üë• Gerenciar Inscri√ß√µes de Estudantes
description: Solicitar altera√ß√µes em massa nas inscri√ß√µes de estudantes
title: "[Inscri√ß√µes]: "
labels: ["enhancement", "inscri√ß√µes", "copilot"]
assignees:
  - copilot
body:
  - type: markdown
    attributes:
      value: |
        ## üë• Formul√°rio de Gerenciamento de Inscri√ß√µes
        
        Use este formul√°rio para solicitar altera√ß√µes em inscri√ß√µes de estudantes,
        como transfer√™ncias em massa, cancelamentos ou corre√ß√µes.
        
        **O Copilot ser√° automaticamente designado para implementar esta solicita√ß√£o.**

  - type: dropdown
    id: operation-type
    attributes:
      label: Tipo de Opera√ß√£o *
      description: Que tipo de altera√ß√£o voc√™ precisa fazer?
      options:
        - Transferir estudantes entre atividades
        - Cancelar m√∫ltiplas inscri√ß√µes
        - Adicionar m√∫ltiplos estudantes
        - Corrigir emails de estudantes
        - Limpar lista de participantes
        - Exportar lista de participantes
        - Outro
    validations:
      required: true

  - type: input
    id: activity-name
    attributes:
      label: Nome da Atividade Principal *
      description: Nome da atividade afetada
      placeholder: "Ex: Chess Club"
    validations:
      required: true

  - type: input
    id: activity-name-secondary
    attributes:
      label: Nome da Atividade Secund√°ria
      description: (Opcional) Se for transfer√™ncia, para qual atividade?
      placeholder: "Ex: Advanced Chess Club"

  - type: textarea
    id: student-list
    attributes:
      label: Lista de Estudantes
      description: Liste os emails dos estudantes afetados (um por linha)
      placeholder: |
        student1@mergington.edu
        student2@mergington.edu
        student3@mergington.edu
      render: text

  - type: textarea
    id: justification
    attributes:
      label: Justificativa *
      description: Por que esta altera√ß√£o √© necess√°ria?
      placeholder: "Ex: A turma foi dividida em dois n√≠veis e os estudantes avan√ßados precisam ser transferidos."
    validations:
      required: true

  - type: checkboxes
    id: confirmations
    attributes:
      label: Confirma√ß√µes *
      description: Confirme os seguintes pontos
      options:
        - label: Tenho autoriza√ß√£o para fazer estas altera√ß√µes
          required: true
        - label: Todos os estudantes/respons√°veis foram notificados
          required: true
        - label: Verifiquei que as atividades de destino t√™m capacidade (se transfer√™ncia)
          required: true

  - type: textarea
    id: additional-context
    attributes:
      label: Informa√ß√µes Adicionais
      description: Qualquer outra informa√ß√£o relevante

  - type: markdown
    attributes:
      value: |
        ---
        
        ## ü§ñ Crit√©rios de Aceita√ß√£o para o Copilot
        
        A implementa√ß√£o deve:
        1. Validar que as atividades mencionadas existem
        2. Validar formato dos emails fornecidos
        3. Para transfer√™ncias:
           - Verificar capacidade da atividade de destino
           - Remover estudantes da atividade origem
           - Adicionar estudantes na atividade destino
           - Validar que n√£o h√° duplicatas
        4. Para cancelamentos:
           - Verificar que os estudantes est√£o inscritos
           - Remover estudantes da atividade
        5. Para adi√ß√µes:
           - Verificar capacidade dispon√≠vel
           - Validar que estudantes n√£o est√£o j√° inscritos
           - Adicionar estudantes
        6. Criar migra√ß√£o Mongock com rollback
        7. Validar altera√ß√µes na interface web
        
        ## üí° Dicas de Implementa√ß√£o
        
        ### Transfer√™ncia de Estudantes
        ```java
        @Execution
        public void execute() {
            // 1. Buscar atividades
            Activity origin = mongoTemplate.findOne(
                Query.query(Criteria.where("name").is("Chess Club")), 
                Activity.class);
            Activity destination = mongoTemplate.findOne(
                Query.query(Criteria.where("name").is("Advanced Chess Club")), 
                Activity.class);
            
            // 2. Lista de estudantes para transferir
            List<String> students = List.of(
                "student1@mergington.edu",
                "student2@mergington.edu"
            );
            
            // 3. Validar capacidade
            if (destination.getParticipants().size() + students.size() > 
                destination.getMaxParticipants()) {
                throw new IllegalStateException("Insufficient capacity");
            }
            
            // 4. Transferir cada estudante
            for (String email : students) {
                Email studentEmail = new Email(email);
                
                // Remover da origem
                if (origin.isParticipantRegistered(studentEmail)) {
                    origin.removeParticipant(studentEmail);
                }
                
                // Adicionar no destino
                if (!destination.isParticipantRegistered(studentEmail)) {
                    destination.addParticipant(studentEmail);
                }
            }
            
            // 5. Salvar altera√ß√µes
            mongoTemplate.save(origin);
            mongoTemplate.save(destination);
        }
        ```
        
        ### Cancelamento em Massa
        ```java
        @Execution
        public void execute() {
            Activity activity = mongoTemplate.findOne(
                Query.query(Criteria.where("name").is("Activity Name")), 
                Activity.class);
            
            List<String> studentsToRemove = List.of(
                "student1@mergington.edu",
                "student2@mergington.edu"
            );
            
            for (String email : studentsToRemove) {
                Email studentEmail = new Email(email);
                if (activity.isParticipantRegistered(studentEmail)) {
                    activity.removeParticipant(studentEmail);
                }
            }
            
            mongoTemplate.save(activity);
        }
        ```
        
        ### Adi√ß√£o em Massa
        ```java
        @Execution
        public void execute() {
            Activity activity = mongoTemplate.findOne(
                Query.query(Criteria.where("name").is("Activity Name")), 
                Activity.class);
            
            List<String> studentsToAdd = List.of(
                "student1@mergington.edu",
                "student2@mergington.edu"
            );
            
            // Validar capacidade total
            int spotsNeeded = studentsToAdd.size();
            int spotsAvailable = activity.getMaxParticipants() - 
                                activity.getParticipants().size();
            
            if (spotsNeeded > spotsAvailable) {
                throw new IllegalStateException(
                    "Not enough capacity. Need: " + spotsNeeded + 
                    ", Available: " + spotsAvailable);
            }
            
            // Adicionar cada estudante
            for (String email : studentsToAdd) {
                Email studentEmail = new Email(email);
                if (!activity.isParticipantRegistered(studentEmail)) {
                    activity.addParticipant(studentEmail);
                }
            }
            
            mongoTemplate.save(activity);
        }
        ```
        
        ## üîç Contexto T√©cnico
        
        - **Entidade**: `Activity` - cont√©m lista de participantes
        - **Value Object**: `Email` - valida formato de email
        - **M√©todos √∫teis**:
          - `activity.addParticipant(Email)` - adiciona com valida√ß√µes
          - `activity.removeParticipant(Email)` - remove com valida√ß√µes
          - `activity.isParticipantRegistered(Email)` - verifica exist√™ncia
          - `activity.canAddParticipant()` - verifica capacidade
          - `activity.getParticipants()` - lista atual
        
        ## ‚ö†Ô∏è Valida√ß√µes Importantes
        
        1. **Capacidade**: Sempre verificar antes de adicionar
        2. **Duplicatas**: N√£o adicionar estudante j√° inscrito
        3. **Emails**: Validar formato usando classe Email
        4. **Exist√™ncia**: Verificar se estudante est√° na origem antes de remover
        5. **Atomicidade**: Todas opera√ß√µes devem suceder ou falhar juntas
        
        ## üìã Checklist de Valida√ß√£o
        
        - [ ] Atividade(s) localizada(s) corretamente
        - [ ] Emails validados (formato correto)
        - [ ] Capacidade verificada (para adi√ß√µes/transfer√™ncias)
        - [ ] Duplicatas prevenidas
        - [ ] Estudantes existentes verificados (para remo√ß√µes)
        - [ ] Altera√ß√µes persistidas no banco
        - [ ] Rollback implementado
        - [ ] Validado na interface web
        - [ ] Listas de participantes atualizadas corretamente
