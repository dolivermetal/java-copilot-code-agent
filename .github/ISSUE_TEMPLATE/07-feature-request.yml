name: ‚ú® Solicitar Nova Funcionalidade
description: Sugerir uma nova funcionalidade ou melhoria para o sistema
title: "[Feature]: "
labels: ["enhancement", "feature-request", "copilot"]
assignees:
  - copilot
body:
  - type: markdown
    attributes:
      value: |
        ## ‚ú® Formul√°rio de Nova Funcionalidade
        
        Use este formul√°rio para sugerir novas funcionalidades ou melhorias no sistema.
        Seja o mais espec√≠fico poss√≠vel sobre o que voc√™ precisa.
        
        **O Copilot ser√° automaticamente designado para avaliar e implementar.**

  - type: dropdown
    id: category
    attributes:
      label: Categoria *
      description: Que tipo de funcionalidade voc√™ est√° solicitando?
      options:
        - Nova funcionalidade - Interface Web
        - Nova funcionalidade - API REST
        - Melhoria - Interface Web
        - Melhoria - Performance
        - Melhoria - Usabilidade
        - Nova integra√ß√£o
        - Relat√≥rios e Analytics
        - Outro
    validations:
      required: true

  - type: textarea
    id: problem-statement
    attributes:
      label: Descri√ß√£o do Problema *
      description: Que problema esta funcionalidade resolve?
      placeholder: "Ex: Atualmente n√£o √© poss√≠vel visualizar um calend√°rio mensal das atividades, dificultando o planejamento."
    validations:
      required: true

  - type: textarea
    id: proposed-solution
    attributes:
      label: Solu√ß√£o Proposta *
      description: Como voc√™ imagina que esta funcionalidade deveria funcionar?
      placeholder: "Ex: Adicionar uma visualiza√ß√£o de calend√°rio mensal onde as atividades aparecem nos dias e hor√°rios correspondentes."
    validations:
      required: true

  - type: textarea
    id: user-story
    attributes:
      label: Hist√≥ria de Usu√°rio *
      description: Descreva como um usu√°rio usaria esta funcionalidade
      placeholder: |
        Como [tipo de usu√°rio]
        Eu quero [realizar uma a√ß√£o]
        Para que [benef√≠cio/objetivo]
        
        Ex: Como professor, eu quero exportar a lista de participantes de uma atividade em CSV para que eu possa importar no meu sistema de notas.
    validations:
      required: true

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: Crit√©rios de Aceita√ß√£o *
      description: Como saberemos que a funcionalidade est√° completa e funcionando?
      placeholder: |
        - [ ] Crit√©rio 1
        - [ ] Crit√©rio 2
        - [ ] Crit√©rio 3
        
        Ex:
        - [ ] Bot√£o "Exportar" aparece na p√°gina de detalhes da atividade
        - [ ] Ao clicar, um arquivo CSV √© baixado
        - [ ] O CSV cont√©m: nome, email, data de inscri√ß√£o de cada participante
        - [ ] O formato do CSV √© compat√≠vel com Excel
    validations:
      required: true

  - type: dropdown
    id: priority
    attributes:
      label: Prioridade *
      description: Qu√£o importante √© esta funcionalidade?
      options:
        - Cr√≠tica - Necess√°ria para opera√ß√£o
        - Alta - Muito importante
        - M√©dia - Seria √∫til ter
        - Baixa - Nice to have
    validations:
      required: true

  - type: textarea
    id: alternatives
    attributes:
      label: Alternativas Consideradas
      description: Voc√™ considerou outras solu√ß√µes? Por que esta √© melhor?
      placeholder: "Ex: Consideramos adicionar a funcionalidade no backend apenas, mas seria mais √∫til ter na interface web."

  - type: textarea
    id: mockups
    attributes:
      label: Mockups ou Exemplos
      description: Se poss√≠vel, forne√ßa exemplos visuais, links ou screenshots de sistemas similares
      placeholder: "Ex: Veja como o sistema X implementa esta funcionalidade: [link]"

  - type: checkboxes
    id: impact-areas
    attributes:
      label: √Åreas Impactadas
      description: Que partes do sistema ser√£o afetadas?
      options:
        - label: Interface Web (HTML/CSS/JS)
        - label: Backend (Java/Spring)
        - label: Banco de Dados (MongoDB)
        - label: API REST
        - label: Documenta√ß√£o
        - label: Testes

  - type: textarea
    id: additional-context
    attributes:
      label: Contexto Adicional
      description: Qualquer outra informa√ß√£o relevante

  - type: markdown
    attributes:
      value: |
        ---
        
        ## ü§ñ Crit√©rios de Aceita√ß√£o para o Copilot
        
        A implementa√ß√£o deve:
        1. Analisar a viabilidade t√©cnica da funcionalidade
        2. Seguir os princ√≠pios de Clean Architecture do projeto
        3. Implementar com altera√ß√µes m√≠nimas e cir√∫rgicas
        4. Adicionar testes para a nova funcionalidade
        5. Atualizar documenta√ß√£o relevante
        6. Garantir que n√£o quebra funcionalidades existentes
        7. Seguir os padr√µes de c√≥digo do projeto
        8. Validar todos os crit√©rios de aceita√ß√£o fornecidos
        
        ## üí° Abordagem de Implementa√ß√£o
        
        ### 1. An√°lise
        - Avaliar impacto nas camadas da arquitetura
        - Identificar componentes que precisam ser alterados
        - Verificar depend√™ncias e integra√ß√µes necess√°rias
        
        ### 2. Design
        - **Domain Layer**: Novas entidades ou value objects?
        - **Application Layer**: Novos use cases ou DTOs?
        - **Infrastructure Layer**: Novas configura√ß√µes ou persist√™ncia?
        - **Presentation Layer**: Novos endpoints ou UI?
        
        ### 3. Implementa√ß√£o
        - Come√ßar pela camada de dom√≠nio (se necess√°rio)
        - Implementar casos de uso na camada de aplica√ß√£o
        - Adicionar endpoints na camada de apresenta√ß√£o
        - Atualizar frontend (se necess√°rio)
        
        ### 4. Testes
        - Testes unit√°rios para l√≥gica de dom√≠nio
        - Testes de integra√ß√£o para endpoints
        - Testes manuais na interface (se aplic√°vel)
        
        ## üèóÔ∏è Estrutura do Projeto
        
        ```
        src/main/java/com/mergingtonhigh/schoolmanagement/
        ‚îú‚îÄ‚îÄ domain/           # Regras de neg√≥cio puras
        ‚îú‚îÄ‚îÄ application/      # Casos de uso e DTOs
        ‚îú‚îÄ‚îÄ infrastructure/   # Implementa√ß√µes t√©cnicas
        ‚îî‚îÄ‚îÄ presentation/     # Controllers e mappers
        
        src/main/resources/
        ‚îî‚îÄ‚îÄ static/           # Frontend (HTML/CSS/JS)
        ```
        
        ## üìã Checklist de Feature
        
        - [ ] An√°lise de viabilidade realizada
        - [ ] Design da solu√ß√£o documentado
        - [ ] Camadas apropriadas identificadas
        - [ ] C√≥digo implementado seguindo Clean Architecture
        - [ ] Testes unit√°rios adicionados
        - [ ] Testes de integra√ß√£o adicionados (se aplic√°vel)
        - [ ] Valida√ß√£o manual realizada
        - [ ] Documenta√ß√£o atualizada
        - [ ] Todos os crit√©rios de aceita√ß√£o atendidos
        - [ ] Build completo passa (mvn clean install)
        - [ ] Nenhuma regress√£o introduzida
        
        ## üéØ Princ√≠pios de Implementa√ß√£o
        
        1. **Clean Architecture**: Depend√™ncias fluem para dentro
        2. **SOLID**: Cada classe tem uma responsabilidade √∫nica
        3. **Domain-Driven Design**: Modelo rico reflete o dom√≠nio
        4. **Minimal Changes**: Menor altera√ß√£o poss√≠vel
        5. **Test Coverage**: Cobrir novos caminhos de c√≥digo
        6. **Documentation**: Atualizar docs relevantes
        
        ## ‚ö†Ô∏è Considera√ß√µes
        
        - Avaliar impacto em performance
        - Considerar escalabilidade
        - Verificar compatibilidade com funcionalidades existentes
        - Validar requisitos de seguran√ßa
        - Considerar experi√™ncia do usu√°rio
